#!/bin/sh

# Rick, this is a POC script for the testing scenario we discussed 
# it is pretty straight forward, grab an image, make a vm of it, wait for it
# to connect to the network, ssh in and do things....
# the only things you should **have** to change is the sshkey info and url 
# for the base image

# can name it whatever you like, but if you're doing multiples you want something unique
name=$(uuidgen)
sshid="/home/quinlan/.ssh/demo"
sshkey="/home/quinlan/.ssh/demo.pub"
disk="/tmp/$name.qcow2"
memory=2048
vcpus=2
network=default
# used a local copy of the latest CentOS stream image
#   https://cloud.centos.org/centos/8-stream/x86_64/images/CentOS-Stream-GenericCloud-8-20210210.0.x86_64.qcow2
url="http://web.local/images/latest.qcow2"

# put what ever commands you need to prep the vm here, 
# these are just dummy cmds to produce dl some stuff from git 
# and make a lot of output you can see
# make sure you escape quote here, if we progress with this
# i can make it upload a script to run

prep_commands="
dnf -y install git nginx

mkdir test
cd test
git clone https://www.github.com/timquinlan/OLF2019
find .
sleep 20
"

# dummy commands, this is where you would do your unit test, determine if the 
# test was a success or not, and go from there
test_commands="
echo 'these are the test commands'
echo
"

wget -O $disk $url

virt-install --noautoconsole \
             --name $name \
	     --memory $memory \
	     --vcpus $vcpus \
	     --disk $disk,bus=sata \
	     --import \
	     --network $network \
	     --cloud-init ssh-key=$sshkey

count=0
max=600
echo "Waiting for host to connect to network (max $max)"
while [ $count -lt $max ]
do
  sleep 1
  #is there a cleaner way to get the VMs IP?
  ip=$(virsh --quiet domifaddr $name|awk '{print $NF}'|awk -F\/ '{print $1}')
  result=$(echo $ip | wc -c)
  if [ $result -gt 1 ]
  then
    count=0
    max=600
    echo "Host is up with IP: $ip"
    echo "Waiting for host to start sshd (max $max)"
    echo
    while [ $count -lt $max ]
    do
      sleep 1
      nc -z $ip 22 
      if [ $? -eq 0 ]
      then
        echo "Host has opened ssh"
        echo
        echo "Logging in to host to perform build and unit test"
        ssh -o StrictHostKeyChecking=no -i $sshid $ip "$prep_commands"
        ssh -o StrictHostKeyChecking=no -i $sshid $ip "$test_commands"
        break
      fi
      count=$(($count + 1))
    done
    break
  fi
  count=$(($count + 1))
done

#comment these out if you want to keep the test vm around
virsh destroy $name
virsh undefine $name
rm $disk
